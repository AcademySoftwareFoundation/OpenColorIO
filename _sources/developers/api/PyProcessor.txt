Python: Processor
=================

Usage
^^^^^
.. code-block:: python

    import PyOpenColorIO as OCIO
    
    config = OCIO.Config()
    processor = config.getProcessor()

Description
^^^^^^^^^^^
The :py:class:`Processor` is the object used to actually perform image transformations.

:py:class:`Processor` objects are not instantiated directly, but are created from the :py:class:`Config`
object, as shown above.


Functions
^^^^^^^^^
        
.. py:method:: Processor.isNoOp()
                     
   Returns whether the actual transformation represented by :py:class:`Processor` is a no-op.
           
   :return: whether transform is a no-op
   :rtype: bool
        

.. py:method:: Processor.hasChannelCrosstalk()
                     
   Returns whether the transformation of :py:class:`Processor` introduces crosstalk between the image
   channels.
           
   :return: whether there's crosstalk between channels
   :rtype: bool
        

CPU Path Methods
^^^^^^^^^^^^^^^^
        
.. py:method:: Processor.applyRGB()
                     
   Apply the RGB part of the transform represented by :py:class:`Processor` to an image.
           
   :param pyData: 
   :type pyData: object
   :return: 
   :rtype: list
        

.. py:method:: Processor.applyRGBA()
                     
   Apply the RGB and alpha part of the transform represented by :py:class:`Processor` to an image.
           
   :param pyData:
   :type pyData: object
   :return: 
   :rtype: list
        

.. py:method:: Processor.getCpuCacheID()
                     
   Returns the cache ID of the CPU that :py:class:`Processor` will run on.
           
   :return: CPU cache ID
   :rtype: string
        

GPU Path Methods
^^^^^^^^^^^^^^^^
        
.. py:method:: Processor.getGpuShaderText()
                     
   Returns the GPU shader text.
           
   :param pyData: two params
   :type pyData: object
   :return: GPU shader text
   :rtype: string
        

.. py:method:: Processor.getGpuShaderTextCacheID()
                     
   Returns the GPU shader text cache ID.
           
   :param pyData: two params
   :type pyData: object
   :return: GPU shader text cache ID
   :rtype: string
        

.. py:method:: Processor.getGpuLut3D()
                     
   Returns the GPU LUT 3D.
           
   :param pyData: two params?
   :type pyData: object
   :return: GPU LUT 3D
   :rtype: list
        

.. py:method:: Processor.getGpuLut3DCacheID()
                     
   Returns the GPU 3D LUT cache ID.
           
   :param pyData: two params
   :type pyData: object
   :return: GPU 3D LUT cache ID
   :rtype: string
        

