Python: AllocationTransform
===========================

Examples of Use
^^^^^^^^^^^^^^^
.. code-block:: python

    import PyOpenColorIO as OCIO
    
    transform = OCIO.AllocationTransform()
    transform.setAllocation(OCIO.Constants.ALLOCATION)


.. py:class:: AllocationTransform()
        
   Respans the 'expanded' range into the specified (often compressed) range.
           
   Performs both squeeze (offset) and log transforms.
        

.. py:method:: AllocationTransform.getAllocation()
           
   Returns the allocation specified in the transform. Allocation is an enum, defined in
   Constants.
           
   :return: Allocation
   :rtype: string
        

.. py:method:: AllocationTransform.setAllocation(&hwalloc)
           
   Sets the allocation of the transform.
           
   :param hwalloc: Allocation
   :type hwalloc: object
        

.. py:method:: AllocationTransform.getVars()
           
   Returns the allocation values specified in the transform.
           
   :return: allocation values
   :rtype: list of floats
        

.. py:method:: AllocationTransform.setVars(&pyvars)
           
   Sets the allocation in the transform.
           
   :param pyvars: list of floats
   :type pyvars: object
        

Python: CDLTransform
====================

Examples of Use
^^^^^^^^^^^^^^^
.. code-block:: python

    import PyOpenColorIO as OCIO
    
    cdl = OCIO.CDLTransform()
    
    # Set the slope, offset, power, and saturation for each channel.
    cdl.setSOP([, , , , , , , , ])
    cdl.setSat([, , ])
    
    cdl.getSatLumaCoefs()


.. py:class::CDLTransform()
    
Description
^^^^^^^^^^^
   Used to define a transform based on a color decision list (CDL), 
   based on the 9 numbers defined in SOP (slope, offset, and power)
   and Sat (saturation). Each element in SOP and Sat are characterized 
   by three floats (for RGB).
    

.. py:method:: Config.setSlope(pyData)
                     
   Sets the slope ('S' part of SOP) in :py:class:`CDLTransform`.

   :param pyData: 
   :type pyData: object
        

.. py:method:: Config.setOffset(pyData)
                     
   Sets the offset ('O' part of SOP) in :py:class:`CDLTransform`.

   :param pyData: list of three floats
   :type pyData: object
        

.. py:method:: Config.setPower(pyData)
                     
   Sets the power ('P' part of SOP) in :py:class:`CDLTransform`.

   :param pyData: list of three floats
   :type pyData: object
        

.. py:method:: Config.setSOP(pyData)
                     
   Sets SOP in :py:class:`CDLTransform`.

   :param pyData: list of nine floats
   :type pyData: object
        

.. py:method:: Config.setSAT(pyData)
                     
   Sets SAT (saturation) in :py:class:`CDLTransform`.

   :param pyData: saturation
   :type pyData: float
        

.. py:method:: Config.getSatLumaCoefs(pyData)
                     
   Returns the SAT (saturation) and luma coefficients in :py:class:`CDLTransform`.

   :return: saturation and luma coefficients
   :rtype: list of floats
        

.. py:method:: Config.getID()
                     
   Returns the ID from :py:class:`CDLTransform`.

   :return: ID
   :rtype: string
        

.. py:method:: Config.setID(str)
                     
   Sets the ID in :py:class:`CDLTransform`.

   :param str: ID
   :type str: string
        

.. py:method:: Config.getDescription()
                     
   Returns the description of :py:class:`CDLTransform`.

   :return: description
   :rtype: string
        

.. py:method:: Config.setDescription(str)
                     
   Sets the description of :py:class:`CDLTransform`.

   :param str: description
   :type str: string
        

Python: ColorSpaceTransform
===========================

   This class is meant so that ColorSpace conversions can be reused, referencing ColorSpaces that already exist.

.. note::
     Careless use of this may create infinite loops, so avoid referencing the colorspace you're in. 

Examples of Use
^^^^^^^^^^^^^^^
.. code-block:: python

    import PyOpenColorIO as OCIO
    
    transform = OCIO.ColorSpaceTransform()


.. py:method:: ColorSpaceTransform.getSrc()
        
   Returns the name of the source ColorSpace in this transform.
           
   :return: ColorSpace
   :rtype: string
        

.. py:method:: ColorSpaceTransform.setSrc()
        
   Sets the source ColorSpace in this transform.
           
   :param str: source ColorSpace
   :type str: string
        

.. py:method:: ColorSpaceTransform.getDst()
        
   Returns the name of the destination ColorSpace in this transform.
           
   :return: ColorSpace
   :rtype: string
        

.. py:method:: ColorSpaceTransform.setDst()
        
   Sets the destination ColorSpace in this transform.
           
   :param str: destination ColorSpace
   :type str: string
        

Python: DisplayTransform
========================
.. code-block:: python

    import PyOpenColorIO as OCIO
    
    transform = OCIO.DisplayTransform()


.. py:class:: DisplayTransform
        
Used to create transforms for displays.             
        

.. py:method:: DisplayTransform.getInputColorSpaceName()
                     
   Returns the name of the input ColorSpace of :py:class:`DisplayTransform`.
   :return: name of input ColorSpace
   :rtype: string
        

.. py:method:: DisplayTransform.setInputColorSpaceName(name)
                     
   Sets the name of the input ColorSpace of :py:class:`DisplayTransform`.
   :param name: name of input ColorSpace
   :type name: string
        

.. py:method:: DisplayTransform.getLinearCC()
                     
   Returns the linear CC transform of :py:class:`DisplayTransform`.
   :return: linear CC transform
   :rtype: object
        

.. py:method:: DisplayTransform.setLinearCC(pyCC)
                     
   Sets the linear CC transform of :py:class:`DisplayTransform`.
   :param pyCC: linear CC
   :type pyCC: object
        

.. py:method:: DisplayTransform.getColorTimingCC()
                     
   Returns the color timing CC transform of :py:class:`DisplayTransform`.
   :return: color timing CC transform
   :rtype: object
        

.. py:method:: DisplayTransform.setColorTimingCC(pyCC)
                     
   Sets the color timing CC transform of :py:class:`DisplayTransform`.
   :param pyCC: color timing CC
   :type pyCC: object
        

.. py:method:: DisplayTransform.getChannelView()
                     
   Returns the channel view of :py:class:`DisplayTransform`.
   :return: channel view
   :rtype: object
        

.. py:method:: DisplayTransform.setChannelView(pyCC)
                     
   Sets the channel view transform of :py:class:`DisplayTransform`.
   :param pyCC: channel view transform
   :type pyCC: object
        

.. py:method:: DisplayTransform.getDisplay()
                     
   Returns the display of :py:class:`DisplayTransform`.
   :return: display
   :rtype: string
        

.. py:method:: DisplayTransform.setChannelView(str)
                     
   Sets the display of :py:class:`DisplayTransform`.
   :param str: display
   :type str: string
        

.. py:method:: DisplayTransform.getView()
                     
   Returns the view of :py:class:`DisplayTransform`.
   :return: view
   :rtype: string
        

.. py:method:: DisplayTransform.setView(str)
                     
   Sets the view of :py:class:`DisplayTransform`.
   :param str: view
   :type str: string
        

.. py:method:: DisplayTransform.getDisplayCC()
                     
   Returns the display CC transform of :py:class:`DisplayTransform`.
   :return: display CC
   :rtype: object
        

.. py:method:: DisplayTransform.setDisplayCC(pyCC)
                     
   Sets the display CC transform of :py:class:`DisplayTransform`.
   :param pyCC: display CC
   :type pyCC: object
        

.. py:method:: DisplayTransform.getLooksOverride()
                     
   Returns the looks in :py:class:`DisplayTransform` that's overriding :py:class:`Config`'s.
   :return: looks override
   :rtype: string
        

.. py:method:: DisplayTransform.setLooksOverride(str)
                     
   Sets the looks override of :py:class:`DisplayTransform`.
   :param str: looks override
   :type str: string
        

.. py:method:: DisplayTransform.getLooksOverrideEnabled()
                     
   Returns whether the looks override of :py:class:`DisplayTransform` is enabled.
   :return: looks override enabling
   :rtype: bool
        

.. py:method:: DisplayTransform.setLooksOverrideEnabled(enabled)
                     
   Sets the looks override enabling of :py:class:`DisplayTransform`.
   :param enabled: looks override enabling
   :type enabled: object
        

Python: ExponentTransform
=========================
.. code-block:: python

    import PyOpenColorIO as OCIO
    
    transform = OCIO.ExponentTransform()


.. py:method:: ExponentTransform.getValue()
                     
   Returns the values in the exponent transform of :py:class:`ExponentTransform`.
   :return: exponent transform values
   :rtype: list of floats
        

.. py:method:: ExponentTransform.setValue()
                     
   Sets the values in the exponent transform of :py:class:`ExponentTransform`.
   :param pyData: exponent transform values
   :type pyData: list of 4 floats
        

Python: LogTransform
====================

Examples of Use
^^^^^^^^^^^^^^^
.. code-block:: python

    import PyOpenColorIO as OCIO

Description
^^^^^^^^^^^
:py:class:`LogTransform` is used to define a log transform.

The direction of the transform and its numerical base can be specified.


.. py:method:: Config.getBase()
                     
   Returns the base of :py:class:`LogTransform`.

        

.. py:method:: Config.setBase(base)
                     
   Sets the base in :py:class:`LogTransform`.

   :param base: base of log transform
   :type base: float
        

