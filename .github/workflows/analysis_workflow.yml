# SPDX-License-Identifier: BSD-3-Clause
# Copyright Contributors to the OpenColorIO Project.
#
# GitHub Actions workflow file
# https://help.github.com/en/actions/reference/workflow-syntax-for-github-actions

name: Analysis

on:
  schedule:
    # Nightly build
    - cron: "0 0 * * *"

jobs:
  # ---------------------------------------------------------------------------
  # Linux latest ext packages
  # ---------------------------------------------------------------------------

  linux_latest:
    name: 'Linux CentOS 7 VFX CY${{ matrix.vfx-cy }} latest 
      <${{ matrix.compiler-desc }} 
       cxx=${{ matrix.cxx-standard }}, 
       docs=${{ matrix.build-docs }}>'
    # Don't run on OCIO forks
    if: github.repository == 'AcademySoftwareFoundation/OpenColorIO'
    # GH-hosted VM. The build runs in CentOS 7 'container' defined below.
    runs-on: ubuntu-latest
    container:
      # DockerHub: https://hub.docker.com/u/aswf
      # Source: https://github.com/AcademySoftwareFoundation/aswf-docker
      image: aswf/ci-base:${{ matrix.vfx-cy }}
    strategy:
      matrix:
        build: [1, 2, 3, 4]
        include:
          # -------------------------------------------------------------------
          # GCC
          # -------------------------------------------------------------------
          # VFX CY2022, C++17, docs, OpenFX
          - build: 1
            build-docs: 'ON'
            build-openfx: 'ON'
            cxx-standard: 17
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 9.3.1
            vfx-cy: 2022
          # VFX CY2021, C++14
          - build: 2
            build-docs: 'OFF'
            build-openfx: 'OFF'
            cxx-standard: 14
            cxx-compiler: g++
            cc-compiler: gcc
            compiler-desc: GCC 9.3.1
            vfx-cy: 2021
          # -------------------------------------------------------------------
          # Clang
          # -------------------------------------------------------------------
          # VFX CY2022, C++17
          - build: 3
            build-docs: 'OFF'
            build-openfx: 'OFF'
            cxx-standard: 17
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 9
            vfx-cy: 2022
          # VFX CY2021, C++14, docs, OpenFX
          - build: 4
            build-docs: 'ON'
            build-openfx: 'ON'
            cxx-standard: 14
            cxx-compiler: clang++
            cc-compiler: clang
            compiler-desc: Clang 9
            vfx-cy: 2021
    env:
      CXX: ${{ matrix.cxx-compiler }}
      CC: ${{ matrix.cc-compiler }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install docs env
        run: share/ci/scripts/linux/yum/install_docs_env.sh
        if: matrix.build-docs == 'ON'
      - name: Install tests env
        run: share/ci/scripts/linux/yum/install_tests_env.sh
      - name: Install latest ext package versions
        run: |
          share/ci/scripts/linux/install_expat.sh latest
          share/ci/scripts/linux/install_lcms2.sh latest
          share/ci/scripts/linux/install_yaml-cpp.sh latest
          share/ci/scripts/linux/install_pystring.sh latest
          share/ci/scripts/linux/install_pybind11.sh latest
          share/ci/scripts/linux/install_openexr.sh latest
          share/ci/scripts/linux/install_imath.sh latest
          share/ci/scripts/linux/install_oiio.sh latest
          share/ci/scripts/linux/install_openfx.sh latest
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DOCIO_BUILD_DOCS=${{ matrix.build-docs }} \
                -DOCIO_BUILD_OPENFX=${{ matrix.build-openfx }} \
                -DOCIO_BUILD_GPU_TESTS=OFF \
                -DOCIO_INSTALL_EXT_PACKAGES=ALL \
                -DOCIO_INSTALL_EXT_PACKAGES_LATEST=ON \
                -DOCIO_WARNING_AS_ERROR=OFF \
                -DPython_EXECUTABLE=$(which python)
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config Release \
                -- -j$(nproc)
        working-directory: _build
      - name: Test
        run: ctest -V -C Release
        working-directory: _build
      - name: Test CMake Consumer
        run: |
          cmake . \
                -DCMAKE_PREFIX_PATH=../../../_install \
                -DCMAKE_BUILD_TYPE=Release
          cmake --build . \
                --config Release
          ./consumer
        working-directory: _build/tests/cmake-consumer-dist

  # ---------------------------------------------------------------------------
  # MacOS latest ext packages
  # ---------------------------------------------------------------------------

  macos-latest:
    name: 'macOS latest 
      <AppleClang 12.0 
       cxx=${{ matrix.cxx-standard }}, 
       docs=${{ matrix.build-docs }}, 
       python=${{ matrix.python-version }}>'
    # Don't run on OCIO forks
    if: github.repository == 'AcademySoftwareFoundation/OpenColorIO'
    runs-on: macos-latest
    strategy:
      matrix:
        build: [1, 2]
        include:
          # C++17
          - build: 1
            build-docs: 'ON'
            build-openfx: 'ON'
            cxx-standard: 17
            python-version: 3.9
          # C++14
          - build: 2
            build-docs: 'ON'
            build-openfx: 'ON'
            cxx-standard: 14
            python-version: 3.9
    steps:
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install docs env
        run: share/ci/scripts/macos/install_docs_env.sh
        if: matrix.build-docs == 'ON'
      - name: Install tests env
        run: share/ci/scripts/macos/install_tests_env.sh
      - name: Install latest ext package versions
        run: |
          share/ci/scripts/macos/install_oiio.sh latest
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DOCIO_BUILD_DOCS=${{ matrix.build-docs }} \
                -DOCIO_BUILD_OPENFX=${{ matrix.build-openfx }} \
                -DOCIO_BUILD_GPU_TESTS=OFF \
                -DOCIO_INSTALL_EXT_PACKAGES=ALL \
                -DOCIO_INSTALL_EXT_PACKAGES_LATEST=ON \
                -DOCIO_WARNING_AS_ERROR=OFF \
                -DPython_EXECUTABLE=$(which python)
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config Release \
                -- -j$(sysctl -n hw.ncpu)
        working-directory: _build
      - name: Test
        run: ctest -V
        working-directory: _build
      - name: Test CMake Consumer
        run: |
          cmake . \
                -DCMAKE_PREFIX_PATH=../../../_install \
                -DCMAKE_BUILD_TYPE=Release
          cmake --build . \
                --config Release
          ./consumer
        working-directory: _build/tests/cmake-consumer-dist


  # ---------------------------------------------------------------------------
  # Windows latest ext packages
  # ---------------------------------------------------------------------------

  windows-latest:
    name: 'Windows latest 
      <MSVC 
       cxx=${{ matrix.cxx-standard }}, 
       docs=${{ matrix.build-docs }}, 
       python=${{ matrix.python-version }}>'
    # Don't run on OCIO forks
    if: github.repository == 'AcademySoftwareFoundation/OpenColorIO'
    runs-on: windows-latest
    strategy:
      matrix:
        build: [1, 2]
        include:
          # C++17
          - build: 1
            build-docs: 'ON'
            build-openfx: 'ON'
            cxx-standard: 17
            python-version: 3.9
          # C++14
          - build: 2
            build-docs: 'ON'
            build-openfx: 'ON'
            cxx-standard: 14
            python-version: 3.9
    steps:
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install docs env
        run: share/ci/scripts/windows/install_docs_env.sh
        shell: bash
        if: matrix.build-docs == 'ON'
      - name: Install tests env
        run: share/ci/scripts/windows/install_tests_env.sh
      # TODO: install OIIO through a package manager or manual install.
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
        shell: bash
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_CXX_STANDARD=${{ matrix.cxx-standard }} \
                -DOCIO_BUILD_DOCS=${{ matrix.build-docs }} \
                -DOCIO_BUILD_OPENFX=${{ matrix.build-openfx }} \
                -DOCIO_BUILD_GPU_TESTS=OFF \
                -DOCIO_INSTALL_EXT_PACKAGES=ALL \
                -DOCIO_INSTALL_EXT_PACKAGES_LATEST=ON \
                -DOCIO_WARNING_AS_ERROR=OFF \
                -DPython_EXECUTABLE=$(which python)
        shell: bash
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --target install \
                --config Release \
                --parallel
        shell: bash
        working-directory: _build
      - name: Test
        run: ctest -V
        shell: bash
        working-directory: _build
      - name: Test CMake Consumer
        run: |
          cmake . \
                -DCMAKE_PREFIX_PATH=../../../_install \
                -DCMAKE_BUILD_TYPE=Release
          cmake --build . \
                --config Release
          export PATH=../../../_install/bin:$PATH
          ./Release/consumer
        shell: bash
        working-directory: _build/tests/cmake-consumer-dist


  # ---------------------------------------------------------------------------
  # SonarCloud static analysis
  # ---------------------------------------------------------------------------

  linux_sonarcloud:
    name: 'Linux CentOS 7 VFX CY2022 SonarCloud <GCC 9.3.1>'
    # Don't run on OCIO forks
    if: github.repository == 'AcademySoftwareFoundation/OpenColorIO'
    # GH-hosted VM. The build runs in CentOS 7 'container' defined below.
    runs-on: ubuntu-latest
    container:
      # DockerHub: https://hub.docker.com/u/aswf
      # Source: https://github.com/AcademySoftwareFoundation/aswf-docker
      image: aswf/ci-ocio:2022
    env:
      CXX: g++
      CC: gcc
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 50
      - name: Install docs env
        run: share/ci/scripts/linux/yum/install_docs_env.sh
      - name: Install tests env
        run: share/ci/scripts/linux/yum/install_tests_env.sh
      - name: Create build directories
        run: |
          mkdir _install
          mkdir _build
      - name: Configure
        run: |
          cmake ../. \
                -DCMAKE_INSTALL_PREFIX=../_install \
                -DCMAKE_BUILD_TYPE=Release \
                -DCMAKE_CXX_STANDARD=14 \
                -DCMAKE_CXX_FLAGS="-g -O0 -fprofile-arcs -ftest-coverage" \
                -DCMAKE_CXX_OUTPUT_EXTENSION_REPLACE=ON \
                -DCMAKE_EXE_LINKER_FLAGS="-lgcov" \
                -DOCIO_BUILD_DOCS=ON \
                -DOCIO_BUILD_GPU_TESTS=OFF \
                -DOCIO_INSTALL_EXT_PACKAGES=ALL \
                -DOCIO_WARNING_AS_ERROR=ON \
                -DPython_EXECUTABLE=$(which python)
        working-directory: _build
      - name: Build OCIO with build-wrapper
        run: build-wrapper-linux-x86-64 --out-dir bw_output make clean all
        working-directory: _build
      - name: Test
        run: ctest -V -C Release
        working-directory: _build
      - name: Generate code coverage report
        run: share/ci/scripts/linux/run_gcov.sh
      - name: Run sonar-scanner
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: sonar-scanner -X -Dsonar.login=$SONAR_TOKEN
