..
  SPDX-License-Identifier: CC-BY-4.0
  Copyright Contributors to the OpenColorIO Project.
  Do not edit! This file was automatically generated by share/docs/frozendoc.py.

.. py:class:: ExponentWithLinearTransform
   :module: PyOpenColorIO

   Represents power functions with a linear section in the shadows such as sRGB and L*.

   The basic formula is::

   pow( (x + offset)/(1 + offset), gamma ) with the breakpoint at offset/(gamma - 1).

   Negative values are never clamped.


   .. py:method:: ExponentWithLinearTransform.__init__(*args, **kwargs)
      :module: PyOpenColorIO

      Overloaded function.

      1. __init__(self: PyOpenColorIO.ExponentWithLinearTransform) -> None

      2. __init__(self: PyOpenColorIO.ExponentWithLinearTransform, gamma: List[float[4]] = [1.0, 1.0, 1.0, 1.0], offset: List[float[4]] = [0.0, 0.0, 0.0, 0.0], negativeStyle: PyOpenColorIO.NegativeStyle = <NegativeStyle.NEGATIVE_LINEAR: 3>, direction: PyOpenColorIO.TransformDirection = <TransformDirection.TRANSFORM_DIR_FORWARD: 0>) -> None


   .. py:method:: ExponentWithLinearTransform.equals(self: PyOpenColorIO.ExponentWithLinearTransform, other: PyOpenColorIO.ExponentWithLinearTransform) -> bool
      :module: PyOpenColorIO

      Checks if this exactly equals other.


   .. py:method:: ExponentWithLinearTransform.getDirection(self: PyOpenColorIO.Transform) -> PyOpenColorIO.TransformDirection
      :module: PyOpenColorIO


   .. py:method:: ExponentWithLinearTransform.getFormatMetadata(self: PyOpenColorIO.ExponentWithLinearTransform) -> PyOpenColorIO.FormatMetadata
      :module: PyOpenColorIO


   .. py:method:: ExponentWithLinearTransform.getGamma(self: PyOpenColorIO.ExponentWithLinearTransform) -> List[float[4]]
      :module: PyOpenColorIO


   .. py:method:: ExponentWithLinearTransform.getNegativeStyle(self: PyOpenColorIO.ExponentWithLinearTransform) -> PyOpenColorIO.NegativeStyle
      :module: PyOpenColorIO

      Specifies how negative values are handled. Legal values:

      - NEGATIVE_LINEAR -- Linear segment continues into negatives (default).
      - NEGATIVE_MIRROR -- Positive curve is rotated 180 degrees around the origin to handle negatives.


   .. py:method:: ExponentWithLinearTransform.getOffset(self: PyOpenColorIO.ExponentWithLinearTransform) -> List[float[4]]
      :module: PyOpenColorIO


   .. py:method:: ExponentWithLinearTransform.getTransformType(self: PyOpenColorIO.Transform) -> PyOpenColorIO.TransformType
      :module: PyOpenColorIO


   .. py:method:: ExponentWithLinearTransform.setDirection(self: PyOpenColorIO.Transform, direction: PyOpenColorIO.TransformDirection) -> None
      :module: PyOpenColorIO

      Note that this only affects the evaluation and not the values stored in the object.


   .. py:method:: ExponentWithLinearTransform.setGamma(self: PyOpenColorIO.ExponentWithLinearTransform, values: List[float[4]]) -> None
      :module: PyOpenColorIO

      Set the exponent value for the power function for R, G, B, A.

      .. note::
         The gamma values must be in the range of [1, 10]. Set the transform direction to inverse to obtain the effect of values less than 1.


   .. py:method:: ExponentWithLinearTransform.setNegativeStyle(self: PyOpenColorIO.ExponentWithLinearTransform, style: PyOpenColorIO.NegativeStyle) -> None
      :module: PyOpenColorIO


   .. py:method:: ExponentWithLinearTransform.setOffset(self: PyOpenColorIO.ExponentWithLinearTransform, values: List[float[4]]) -> None
      :module: PyOpenColorIO

      Set the offset value for the power function for R, G, B, A.

      .. note::
         The offset values must be in the range [0, 0.9].


   .. py:method:: ExponentWithLinearTransform.validate(self: PyOpenColorIO.Transform) -> None
      :module: PyOpenColorIO

      Will throw if data is not valid.

