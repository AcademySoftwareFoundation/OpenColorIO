..
  SPDX-License-Identifier: CC-BY-4.0
  Copyright Contributors to the OpenColorIO Project.
  Do not edit! This file was automatically generated by share/docs/frozendoc.py.

.. py:class:: Context
   :module: PyOpenColorIO


   .. py:method:: Context.__init__(*args, **kwargs)
      :module: PyOpenColorIO

      Overloaded function.

      1. __init__(self: PyOpenColorIO.Context) -> None

      2. __init__(self: PyOpenColorIO.Context, workingDir: str = '', searchPaths: List[str] = [], stringVars: Dict[str, str] = {}, environmentMode: PyOpenColorIO.EnvironmentMode = <EnvironmentMode.ENV_ENVIRONMENT_LOAD_PREDEFINED: 1>) -> None


   .. py:method:: Context.addSearchPath(self: PyOpenColorIO.Context, path: str) -> None
      :module: PyOpenColorIO


   .. py:method:: Context.clearSearchPaths(self: PyOpenColorIO.Context) -> None
      :module: PyOpenColorIO


   .. py:method:: Context.clearStringVars(self: PyOpenColorIO.Context) -> None
      :module: PyOpenColorIO


   .. py:method:: Context.getCacheID(self: PyOpenColorIO.Context) -> str
      :module: PyOpenColorIO


   .. py:method:: Context.getEnvironmentMode(self: PyOpenColorIO.Context) -> PyOpenColorIO.EnvironmentMode
      :module: PyOpenColorIO

      cpp:function::


   .. py:method:: Context.getSearchPath(self: PyOpenColorIO.Context) -> str
      :module: PyOpenColorIO


   .. py:method:: Context.getSearchPaths(self: PyOpenColorIO.Context) -> PyOpenColorIO.Context.SearchPathIterator
      :module: PyOpenColorIO


   .. py:method:: Context.getStringVars(self: PyOpenColorIO.Context) -> PyOpenColorIO.Context.StringVarIterator
      :module: PyOpenColorIO


   .. py:method:: Context.getWorkingDir(self: PyOpenColorIO.Context) -> str
      :module: PyOpenColorIO


   .. py:method:: Context.loadEnvironment(self: PyOpenColorIO.Context) -> None
      :module: PyOpenColorIO

      Seed all string vars with the current environment.


   .. py:method:: Context.resolveFileLocation(*args, **kwargs)
      :module: PyOpenColorIO

      Overloaded function.

      1. resolveFileLocation(self: PyOpenColorIO.Context, filename: str) -> str

      Build the resolved and expanded filepath using the search_path when needed, and check if the filepath exists. If it cannot be resolved or found, an exception will be thrown. The method argument is directly from the config file so it can be an absolute or relative file path or a file name.

      .. note::
         The filepath existence check could add a performance hit.

      .. note::
         The context variable resolution is performed using :cpp:func:`resolveStringVar`.

      2. resolveFileLocation(self: PyOpenColorIO.Context, filename: str, usedContextVars: PyOpenColorIO.Context) -> str

      Build the resolved and expanded filepath and return all the context variables used to resolve the filename (empty if no context variables were used).


   .. py:method:: Context.resolveStringVar(*args, **kwargs)
      :module: PyOpenColorIO

      Overloaded function.

      1. resolveStringVar(self: PyOpenColorIO.Context, string: str) -> str

      cpp:function:: Resolve all the context variables from the string. It could be color space

      2. resolveStringVar(self: PyOpenColorIO.Context, string: str, usedContextVars: PyOpenColorIO.Context) -> str

      cpp:function:: Resolve all the context variables from the string and return all the context


   .. py:method:: Context.setEnvironmentMode(self: PyOpenColorIO.Context, mode: PyOpenColorIO.EnvironmentMode) -> None
      :module: PyOpenColorIO

      cpp:function::


   .. py:method:: Context.setSearchPath(self: PyOpenColorIO.Context, path: str) -> None
      :module: PyOpenColorIO


   .. py:method:: Context.setWorkingDir(self: PyOpenColorIO.Context, dirName: str) -> None
      :module: PyOpenColorIO


.. py:class:: StringVarNameIterator
   :module: PyOpenColorIO.Context


   .. py:method:: StringVarNameIterator.__getitem__(self: PyOpenColorIO.Context.StringVarNameIterator, arg0: int) -> str
      :module: PyOpenColorIO.Context


   .. py:method:: StringVarNameIterator.__iter__(self: PyOpenColorIO.Context.StringVarNameIterator) -> PyOpenColorIO.Context.StringVarNameIterator
      :module: PyOpenColorIO.Context


   .. py:method:: StringVarNameIterator.__len__(self: PyOpenColorIO.Context.StringVarNameIterator) -> int
      :module: PyOpenColorIO.Context


   .. py:method:: StringVarNameIterator.__next__(self: PyOpenColorIO.Context.StringVarNameIterator) -> str
      :module: PyOpenColorIO.Context


.. py:class:: StringVarIterator
   :module: PyOpenColorIO.Context


   .. py:method:: StringVarIterator.__getitem__(self: PyOpenColorIO.Context.StringVarIterator, arg0: int) -> tuple
      :module: PyOpenColorIO.Context


   .. py:method:: StringVarIterator.__iter__(self: PyOpenColorIO.Context.StringVarIterator) -> PyOpenColorIO.Context.StringVarIterator
      :module: PyOpenColorIO.Context


   .. py:method:: StringVarIterator.__len__(self: PyOpenColorIO.Context.StringVarIterator) -> int
      :module: PyOpenColorIO.Context


   .. py:method:: StringVarIterator.__next__(self: PyOpenColorIO.Context.StringVarIterator) -> tuple
      :module: PyOpenColorIO.Context


.. py:class:: SearchPathIterator
   :module: PyOpenColorIO.Context


   .. py:method:: SearchPathIterator.__getitem__(self: PyOpenColorIO.Context.SearchPathIterator, arg0: int) -> str
      :module: PyOpenColorIO.Context


   .. py:method:: SearchPathIterator.__iter__(self: PyOpenColorIO.Context.SearchPathIterator) -> PyOpenColorIO.Context.SearchPathIterator
      :module: PyOpenColorIO.Context


   .. py:method:: SearchPathIterator.__len__(self: PyOpenColorIO.Context.SearchPathIterator) -> int
      :module: PyOpenColorIO.Context


   .. py:method:: SearchPathIterator.__next__(self: PyOpenColorIO.Context.SearchPathIterator) -> str
      :module: PyOpenColorIO.Context

