..
  SPDX-License-Identifier: CC-BY-4.0
  Copyright Contributors to the OpenColorIO Project.
  Do not edit! This file was automatically generated by share/docs/frozendoc.py.

.. py:class:: LegacyViewingPipeline
   :module: PyOpenColorIO

   Whereas the :ref:`DisplayViewTransform` simply applies a specific view from an OCIO display, the :ref:`LegacyViewingPipeline` provides an example of a complete viewing pipeline of the sort that could be used to implement a viewport in a typical application. It therefore adds, around the :ref:`DisplayViewTransform`, various optional color correction steps and RGBA channel view swizzling. The direction of the DisplayViewTranform is used as the direction of the pipeline. Note: The :ref:`LegacyViewingPipeline` class provides the same functionality as the OCIO v1 DisplayTransform.

   Legacy viewing pipeline:
   - Start in display transform input color space.
   - If linearCC is provided:
   - Go to scene_linear colorspace.
   - Apply linearCC transform.

   - If colorTimingCC is provided:
   - Go to color_timing colorspace.
   - Apply colorTimingCC transform.

   - Apply looks (from display transform or from looks override).
   - Go to first look color space.
   - Apply first look transform.
   - Iterate for all looks.

   - Apply channelView transform.
   - Apply display transform (without looks).
   - Apply displayCC. Note that looks are applied even if the display transform involves data color spaces.


   .. py:method:: LegacyViewingPipeline.__init__(self: PyOpenColorIO.LegacyViewingPipeline) -> None
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.getChannelView(self: PyOpenColorIO.LegacyViewingPipeline) -> PyOpenColorIO.Transform
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.getColorTimingCC(self: PyOpenColorIO.LegacyViewingPipeline) -> PyOpenColorIO.Transform
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.getDisplayCC(self: PyOpenColorIO.LegacyViewingPipeline) -> PyOpenColorIO.Transform
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.getDisplayViewTransform(self: PyOpenColorIO.LegacyViewingPipeline) -> PyOpenColorIO.DisplayViewTransform
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.getLinearCC(self: PyOpenColorIO.LegacyViewingPipeline) -> PyOpenColorIO.Transform
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.getLooksOverride(self: PyOpenColorIO.LegacyViewingPipeline) -> str
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.getLooksOverrideEnabled(self: PyOpenColorIO.LegacyViewingPipeline) -> bool
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.getProcessor(self: PyOpenColorIO.LegacyViewingPipeline, config: PyOpenColorIO.Config, context: PyOpenColorIO.Context = None) -> PyOpenColorIO.Processor
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.setChannelView(self: PyOpenColorIO.LegacyViewingPipeline, arg0: PyOpenColorIO.Transform) -> None
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.setColorTimingCC(self: PyOpenColorIO.LegacyViewingPipeline, arg0: PyOpenColorIO.Transform) -> None
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.setDisplayCC(self: PyOpenColorIO.LegacyViewingPipeline, arg0: PyOpenColorIO.Transform) -> None
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.setDisplayViewTransform(self: PyOpenColorIO.LegacyViewingPipeline, arg0: PyOpenColorIO.DisplayViewTransform) -> None
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.setLinearCC(self: PyOpenColorIO.LegacyViewingPipeline, arg0: PyOpenColorIO.Transform) -> None
      :module: PyOpenColorIO


   .. py:method:: LegacyViewingPipeline.setLooksOverride(self: PyOpenColorIO.LegacyViewingPipeline, looks: str) -> None
      :module: PyOpenColorIO

      A user can optionally override the looks that are, by default, used with the expected display / view combination. A common use case for this functionality is in an image viewing app, where per-shot looks are supported. If for some reason a per-shot look is not defined for the current :ref:`Context`, the :ref:`Config::getProcessor` fcn will not succeed by default. Thus, with this mechanism the viewing app could override to looks = "", and this will allow image display to continue (though hopefully) the interface would reflect this fallback option.

      Looks is a potentially comma (or colon) delimited list of lookNames, where +/- prefixes are optionally allowed to denote forward/inverse look specification (and forward is assumed in the absence of either).


   .. py:method:: LegacyViewingPipeline.setLooksOverrideEnabled(self: PyOpenColorIO.LegacyViewingPipeline, arg0: bool) -> None
      :module: PyOpenColorIO

      Specify whether the lookOverride should be used, or not. This is a separate flag, as it's often useful to override "looks" to an empty string.

