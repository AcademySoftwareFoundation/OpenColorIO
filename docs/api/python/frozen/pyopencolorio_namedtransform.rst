..
  SPDX-License-Identifier: CC-BY-4.0
  Copyright Contributors to the OpenColorIO Project.
  Do not edit! This file was automatically generated by share/docs/frozendoc.py.

.. py:class:: NamedTransform
   :module: PyOpenColorIO

   :ref:`NamedTransform`.

   A :ref:`NamedTransform` provides a way for config authors to include a set of color transforms that are independent of the color space being processed. For example a "utility
   curve" transform where there is no need to convert to or from a reference space.


   .. py:method:: NamedTransform.GetTransform(transform: PyOpenColorIO.NamedTransform, direction: PyOpenColorIO.TransformDirection) -> PyOpenColorIO.Transform
      :module: PyOpenColorIO
      :staticmethod:

      Get the requested transform, creating the transform from the inverse direction if the transform for the requested direction is missing.


   .. py:class:: NamedTransform.NamedTransformAliasIterator
      :module: PyOpenColorIO


      .. py:method:: NamedTransform.NamedTransformAliasIterator.__init__(*args, **kwargs)
         :module: PyOpenColorIO


   .. py:method:: NamedTransform.__init__(*args, **kwargs)
      :module: PyOpenColorIO

      Overloaded function.

      1. __init__(self: PyOpenColorIO.NamedTransform) -> None

      2. __init__(self: PyOpenColorIO.NamedTransform, name: str = '', aliases: List[str] = [], family: str = '', description: str = '', forwardTransform: PyOpenColorIO.Transform = None, inverseTransform: PyOpenColorIO.Transform = None, categories: List[str] = []) -> None


   .. py:method:: NamedTransform.addAlias(self: PyOpenColorIO.NamedTransform, alias: str) -> None
      :module: PyOpenColorIO

      Nothing is done if alias is NULL or empty, if it is already there, or if it is already the named transform name.


   .. py:method:: NamedTransform.addCategory(self: PyOpenColorIO.NamedTransform, category: str) -> None
      :module: PyOpenColorIO

      .. see::
         :ref:`ColorSpace::addCategory`


   .. py:method:: NamedTransform.clearAliases(self: PyOpenColorIO.NamedTransform) -> None
      :module: PyOpenColorIO


   .. py:method:: NamedTransform.clearCategories(self: PyOpenColorIO.NamedTransform) -> None
      :module: PyOpenColorIO

      .. see::
         :ref:`ColorSpace::clearCategories`


   .. py:method:: NamedTransform.getAliases(self: PyOpenColorIO.NamedTransform) -> PyOpenColorIO.NamedTransform.NamedTransformAliasIterator
      :module: PyOpenColorIO


   .. py:method:: NamedTransform.getCategories(self: PyOpenColorIO.NamedTransform) -> PyOpenColorIO.NamedTransform.NamedTransformCategoryIterator
      :module: PyOpenColorIO


   .. py:method:: NamedTransform.getDescription(self: PyOpenColorIO.NamedTransform) -> str
      :module: PyOpenColorIO


   .. py:method:: NamedTransform.getEncoding(self: PyOpenColorIO.NamedTransform) -> str
      :module: PyOpenColorIO

      A :ref:`NamedTransform` is not a color space and does not have an encoding in the same sense. However, it may be useful to associate a color space encoding that the transform is intended to be used with, for organizational purposes.


   .. py:method:: NamedTransform.getFamily(self: PyOpenColorIO.NamedTransform) -> str
      :module: PyOpenColorIO

      .. see::
         :ref:`ColorSpace::getFamily`


   .. py:method:: NamedTransform.getName(self: PyOpenColorIO.NamedTransform) -> str
      :module: PyOpenColorIO


   .. py:method:: NamedTransform.getTransform(self: PyOpenColorIO.NamedTransform, direction: PyOpenColorIO.TransformDirection) -> PyOpenColorIO.Transform
      :module: PyOpenColorIO


   .. py:method:: NamedTransform.hasCategory(self: PyOpenColorIO.NamedTransform, category: str) -> bool
      :module: PyOpenColorIO

      .. see::
         :ref:`ColorSpace::hasCategory`


   .. py:method:: NamedTransform.removeAlias(self: PyOpenColorIO.NamedTransform, alias: str) -> None
      :module: PyOpenColorIO

      Does nothing if alias is not present.


   .. py:method:: NamedTransform.removeCategory(self: PyOpenColorIO.NamedTransform, category: str) -> None
      :module: PyOpenColorIO

      .. see::
         :ref:`ColorSpace::removeCategory`


   .. py:method:: NamedTransform.setDescription(self: PyOpenColorIO.NamedTransform, description: str) -> None
      :module: PyOpenColorIO


   .. py:method:: NamedTransform.setEncoding(self: PyOpenColorIO.NamedTransform, encoding: str) -> None
      :module: PyOpenColorIO


   .. py:method:: NamedTransform.setFamily(self: PyOpenColorIO.NamedTransform, family: str) -> None
      :module: PyOpenColorIO

      .. see::
         :ref:`ColorSpace::setFamily`


   .. py:method:: NamedTransform.setName(self: PyOpenColorIO.NamedTransform, name: str) -> None
      :module: PyOpenColorIO


   .. py:method:: NamedTransform.setTransform(self: PyOpenColorIO.NamedTransform, transform: PyOpenColorIO.Transform, direction: PyOpenColorIO.TransformDirection) -> None
      :module: PyOpenColorIO


.. py:class:: NamedTransformCategoryIterator
   :module: PyOpenColorIO.NamedTransform


   .. py:method:: NamedTransformCategoryIterator.__getitem__(self: PyOpenColorIO.NamedTransform.NamedTransformCategoryIterator, arg0: int) -> str
      :module: PyOpenColorIO.NamedTransform


   .. py:method:: NamedTransformCategoryIterator.__iter__(self: PyOpenColorIO.NamedTransform.NamedTransformCategoryIterator) -> PyOpenColorIO.NamedTransform.NamedTransformCategoryIterator
      :module: PyOpenColorIO.NamedTransform


   .. py:method:: NamedTransformCategoryIterator.__len__(self: PyOpenColorIO.NamedTransform.NamedTransformCategoryIterator) -> int
      :module: PyOpenColorIO.NamedTransform


   .. py:method:: NamedTransformCategoryIterator.__next__(self: PyOpenColorIO.NamedTransform.NamedTransformCategoryIterator) -> str
      :module: PyOpenColorIO.NamedTransform

