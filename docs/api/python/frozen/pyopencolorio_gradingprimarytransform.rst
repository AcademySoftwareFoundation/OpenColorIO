..
  SPDX-License-Identifier: CC-BY-4.0
  Copyright Contributors to the OpenColorIO Project.
  Do not edit! This file was automatically generated by share/docs/frozendoc.py.

.. py:class:: GradingPrimaryTransform
   :module: PyOpenColorIO

   Primary color correction controls.

   This transform is for making basic color correction adjustments to an image such as brightness, contrast, or saturation.

   The controls are customized for linear, logarithmic, and video color encodings.
   - Linear controls: Exposure, Contrast, Pivot, Offset, Saturation, Black Clip, White Clip.
   - Log controls: Brightness, Contrast, Pivot, Log Gamma, Saturation, Black Clip, White Clip, Black Pivot White Pivot.
   - Video controls : Lift, Gamma, Gain, Offset, Saturation, Black Clip, White Clip, Black Pivot White Pivot.

   The controls are dynamic, so they may be adjusted even after the :ref:`Transform` has been included in a :ref:`Processor`.


   .. py:method:: GradingPrimaryTransform.__init__(*args, **kwargs)
      :module: PyOpenColorIO

      Overloaded function.

      1. __init__(self: PyOpenColorIO.GradingPrimaryTransform, values: PyOpenColorIO.GradingPrimary, style: PyOpenColorIO.GradingStyle = <GradingStyle.GRADING_LOG: 0>, dynamic: bool = False, dir: PyOpenColorIO.TransformDirection = <TransformDirection.TRANSFORM_DIR_FORWARD: 0>) -> None

      Creates an instance of :ref:`GradingPrimaryTransform`.

      2. __init__(self: PyOpenColorIO.GradingPrimaryTransform, style: PyOpenColorIO.GradingStyle = <GradingStyle.GRADING_LOG: 0>, dynamic: bool = False, dir: PyOpenColorIO.TransformDirection = <TransformDirection.TRANSFORM_DIR_FORWARD: 0>) -> None

      Creates an instance of :ref:`GradingPrimaryTransform`.


   .. py:method:: GradingPrimaryTransform.getDirection(self: PyOpenColorIO.Transform) -> PyOpenColorIO.TransformDirection
      :module: PyOpenColorIO


   .. py:method:: GradingPrimaryTransform.getFormatMetadata(self: PyOpenColorIO.GradingPrimaryTransform) -> PyOpenColorIO.FormatMetadata
      :module: PyOpenColorIO


   .. py:method:: GradingPrimaryTransform.getStyle(self: PyOpenColorIO.GradingPrimaryTransform) -> PyOpenColorIO.GradingStyle
      :module: PyOpenColorIO

      Adjusts the behavior of the transform for log, linear, or video color space encodings.


   .. py:method:: GradingPrimaryTransform.getTransformType(self: PyOpenColorIO.Transform) -> PyOpenColorIO.TransformType
      :module: PyOpenColorIO


   .. py:method:: GradingPrimaryTransform.getValue(self: PyOpenColorIO.GradingPrimaryTransform) -> PyOpenColorIO.GradingPrimary
      :module: PyOpenColorIO


   .. py:method:: GradingPrimaryTransform.isDynamic(self: PyOpenColorIO.GradingPrimaryTransform) -> bool
      :module: PyOpenColorIO

      Parameters can be made dynamic so the values can be changed through the CPU or GPU processor, but if there are several :ref:`GradingPrimaryTransform` only one can have dynamic parameters.


   .. py:method:: GradingPrimaryTransform.makeDynamic(self: PyOpenColorIO.GradingPrimaryTransform) -> None
      :module: PyOpenColorIO


   .. py:method:: GradingPrimaryTransform.makeNonDynamic(self: PyOpenColorIO.GradingPrimaryTransform) -> None
      :module: PyOpenColorIO


   .. py:method:: GradingPrimaryTransform.setDirection(self: PyOpenColorIO.Transform, direction: PyOpenColorIO.TransformDirection) -> None
      :module: PyOpenColorIO

      Note that this only affects the evaluation and not the values stored in the object.


   .. py:method:: GradingPrimaryTransform.setStyle(self: PyOpenColorIO.GradingPrimaryTransform, style: PyOpenColorIO.GradingStyle) -> None
      :module: PyOpenColorIO

      Will reset value to style's defaults if style is not the current style.


   .. py:method:: GradingPrimaryTransform.setValue(self: PyOpenColorIO.GradingPrimaryTransform, values: PyOpenColorIO.GradingPrimary) -> None
      :module: PyOpenColorIO

      Throws if value is not valid.


   .. py:method:: GradingPrimaryTransform.validate(self: PyOpenColorIO.Transform) -> None
      :module: PyOpenColorIO

      Will throw if data is not valid.

