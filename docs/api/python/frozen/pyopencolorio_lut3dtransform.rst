..
  SPDX-License-Identifier: CC-BY-4.0
  Copyright Contributors to the OpenColorIO Project.
  Do not edit! This file was automatically generated by share/docs/frozendoc.py.

.. py:class:: Lut3DTransform
   :module: PyOpenColorIO

   Represents a 3D-LUT transform.


   .. py:method:: Lut3DTransform.__init__(*args, **kwargs)
      :module: PyOpenColorIO

      Overloaded function.

      1. __init__(self: PyOpenColorIO.Lut3DTransform) -> None

      Create an identity 3D-LUT of size 2x2x2.

      2. __init__(self: PyOpenColorIO.Lut3DTransform, gridSize: int) -> None

      Create an identity 3D-LUT with specific grid size. Will throw for grid size larger than 129.

      3. __init__(self: PyOpenColorIO.Lut3DTransform, gridSize: int = 2, fileOutputBitDepth: PyOpenColorIO.BitDepth = <BitDepth.BIT_DEPTH_UNKNOWN: 0>, interpolation: PyOpenColorIO.Interpolation = <Interpolation.INTERP_DEFAULT: 254>, direction: PyOpenColorIO.TransformDirection = <TransformDirection.TRANSFORM_DIR_FORWARD: 0>) -> None

      Create an identity 3D-LUT with specific grid size. Will throw for grid size larger than 129.


   .. py:method:: Lut3DTransform.equals(self: PyOpenColorIO.Lut3DTransform, other: PyOpenColorIO.Lut3DTransform) -> bool
      :module: PyOpenColorIO

      Checks if this exactly equals other.


   .. py:method:: Lut3DTransform.getData(self: PyOpenColorIO.Lut3DTransform) -> numpy.ndarray
      :module: PyOpenColorIO


   .. py:method:: Lut3DTransform.getDirection(self: PyOpenColorIO.Transform) -> PyOpenColorIO.TransformDirection
      :module: PyOpenColorIO


   .. py:method:: Lut3DTransform.getFileOutputBitDepth(self: PyOpenColorIO.Lut3DTransform) -> PyOpenColorIO.BitDepth
      :module: PyOpenColorIO


   .. py:method:: Lut3DTransform.getFormatMetadata(self: PyOpenColorIO.Lut3DTransform) -> PyOpenColorIO.FormatMetadata
      :module: PyOpenColorIO


   .. py:method:: Lut3DTransform.getGridSize(self: PyOpenColorIO.Lut3DTransform) -> int
      :module: PyOpenColorIO


   .. py:method:: Lut3DTransform.getInterpolation(self: PyOpenColorIO.Lut3DTransform) -> PyOpenColorIO.Interpolation
      :module: PyOpenColorIO


   .. py:method:: Lut3DTransform.getTransformType(self: PyOpenColorIO.Transform) -> PyOpenColorIO.TransformType
      :module: PyOpenColorIO


   .. py:method:: Lut3DTransform.getValue(self: PyOpenColorIO.Lut3DTransform, indexR: int, indexG: int, indexB: int) -> tuple
      :module: PyOpenColorIO


   .. py:method:: Lut3DTransform.setData(self: PyOpenColorIO.Lut3DTransform, data: buffer) -> None
      :module: PyOpenColorIO


   .. py:method:: Lut3DTransform.setDirection(self: PyOpenColorIO.Transform, direction: PyOpenColorIO.TransformDirection) -> None
      :module: PyOpenColorIO

      Note that this only affects the evaluation and not the values stored in the object.


   .. py:method:: Lut3DTransform.setFileOutputBitDepth(self: PyOpenColorIO.Lut3DTransform, bitDepth: PyOpenColorIO.BitDepth) -> None
      :module: PyOpenColorIO

      Get the bit-depth associated with the LUT values read from a file or set the bit-depth of values to be written to a file (for file formats such as CLF that support multiple bit-depths). However, note that the values stored in the object are always normalized.


   .. py:method:: Lut3DTransform.setGridSize(self: PyOpenColorIO.Lut3DTransform, gridSize: int) -> None
      :module: PyOpenColorIO

      Changing the grid size will reset the LUT to identity. Will throw for grid sizes larger than 129.


   .. py:method:: Lut3DTransform.setInterpolation(self: PyOpenColorIO.Lut3DTransform, interpolation: PyOpenColorIO.Interpolation) -> None
      :module: PyOpenColorIO


   .. py:method:: Lut3DTransform.setValue(self: PyOpenColorIO.Lut3DTransform, indexR: int, indexG: int, indexB: int, r: float, g: float, b: float) -> None
      :module: PyOpenColorIO

      Set the values of a 3D-LUT. Will throw if an index is outside of the range from 0 to (gridSize-1).

      The LUT values are always for the "forward" LUT, regardless of how the transform direction is set.

      These values are normalized relative to what may be stored in any given LUT files. For example in a CLF file using a "10i" output depth, a value of 1023 in the file is normalized to 1.0. The values here are unclamped and may extend outside [0,1].


   .. py:method:: Lut3DTransform.validate(self: PyOpenColorIO.Transform) -> None
      :module: PyOpenColorIO

      Will throw if data is not valid.

