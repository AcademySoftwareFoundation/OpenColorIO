..
  SPDX-License-Identifier: CC-BY-4.0
  Copyright Contributors to the OpenColorIO Project.
  Do not edit! This file was automatically generated by share/docs/frozendoc.py.

.. py:class:: ColorSpaceSet
   :module: PyOpenColorIO

   The *:ref:`ColorSpaceSet`* is a set of color spaces (i.e. no color space duplication) which could be the result of :ref:`Config::getColorSpaces` or built from scratch.

   .. note::
      The color spaces are decoupled from the config ones, i.e., any changes to the set itself or to its color spaces do not affect the original color spaces from the configuration. If needed, use :ref:`Config::addColorSpace` to update the configuration.


   .. py:method:: ColorSpaceSet.__and__(self: PyOpenColorIO.ColorSpaceSet, arg0: PyOpenColorIO.ColorSpaceSet) -> PyOpenColorIO.ColorSpaceSet
      :module: PyOpenColorIO

      Perform the intersection of two sets.

      .. note::
         This function provides operations on two color space sets where the result contains copied color spaces and no duplicates.

      :param lcss:
      :param rcss:


   .. py:method:: ColorSpaceSet.__eq__(self: PyOpenColorIO.ColorSpaceSet, arg0: PyOpenColorIO.ColorSpaceSet) -> bool
      :module: PyOpenColorIO

      Return true if the two sets are equal.

      .. note::
         The comparison is done on the color space names (not a deep comparison).


   .. py:method:: ColorSpaceSet.__init__(self: PyOpenColorIO.ColorSpaceSet) -> None
      :module: PyOpenColorIO

      Create an empty set of color spaces.


   .. py:method:: ColorSpaceSet.__ne__(self: PyOpenColorIO.ColorSpaceSet, arg0: PyOpenColorIO.ColorSpaceSet) -> bool
      :module: PyOpenColorIO

      Return true if the two sets are different.


   .. py:method:: ColorSpaceSet.__or__(self: PyOpenColorIO.ColorSpaceSet, arg0: PyOpenColorIO.ColorSpaceSet) -> PyOpenColorIO.ColorSpaceSet
      :module: PyOpenColorIO

      Perform the union of two sets.

      .. note::
         This function provides operations on two color space sets where the result contains copied color spaces and no duplicates.

      :param lcss:
      :param rcss:


   .. py:method:: ColorSpaceSet.__sub__(self: PyOpenColorIO.ColorSpaceSet, arg0: PyOpenColorIO.ColorSpaceSet) -> PyOpenColorIO.ColorSpaceSet
      :module: PyOpenColorIO

      Perform the difference of two sets.

      .. note::
         This function provides operations on two color space sets where the result contains copied color spaces and no duplicates.

      :param lcss:
      :param rcss:


   .. py:method:: ColorSpaceSet.addColorSpace(self: PyOpenColorIO.ColorSpaceSet, colorSpace: PyOpenColorIO.ColorSpace) -> None
      :module: PyOpenColorIO

      Add color space(s).

      .. note::
         If another color space is already registered with the same name, this will overwrite it. This stores a copy of the specified color space(s). Throws if one of the aliases is already assigned as a name or alias to an existing color space.


   .. py:method:: ColorSpaceSet.addColorSpaces(self: PyOpenColorIO.ColorSpaceSet, colorSpaces: PyOpenColorIO.ColorSpaceSet) -> None
      :module: PyOpenColorIO


   .. py:method:: ColorSpaceSet.clearColorSpaces(self: PyOpenColorIO.ColorSpaceSet) -> None
      :module: PyOpenColorIO

      Clear all color spaces.


   .. py:method:: ColorSpaceSet.getColorSpace(self: PyOpenColorIO.ColorSpaceSet, name: str) -> PyOpenColorIO.ColorSpace
      :module: PyOpenColorIO

      .. note::
         Only accepts color space names (i.e. no role name).

      Will return null if the name is not found.


   .. py:method:: ColorSpaceSet.getColorSpaceNames(self: PyOpenColorIO.ColorSpaceSet) -> PyOpenColorIO.ColorSpaceSet.ColorSpaceNameIterator
      :module: PyOpenColorIO


   .. py:method:: ColorSpaceSet.getColorSpaces(self: PyOpenColorIO.ColorSpaceSet) -> PyOpenColorIO.ColorSpaceSet.ColorSpaceIterator
      :module: PyOpenColorIO


   .. py:method:: ColorSpaceSet.removeColorSpace(self: PyOpenColorIO.ColorSpaceSet, colorSpace: str) -> None
      :module: PyOpenColorIO

      Remove color space(s) using color space names (i.e. no role name).

      .. note::
         The removal of a missing color space does nothing.


   .. py:method:: ColorSpaceSet.removeColorSpaces(self: PyOpenColorIO.ColorSpaceSet, colorSpaces: PyOpenColorIO.ColorSpaceSet) -> None
      :module: PyOpenColorIO


.. py:class:: ColorSpaceNameIterator
   :module: PyOpenColorIO.ColorSpaceSet


   .. py:method:: ColorSpaceNameIterator.__getitem__(self: PyOpenColorIO.ColorSpaceSet.ColorSpaceNameIterator, arg0: int) -> str
      :module: PyOpenColorIO.ColorSpaceSet


   .. py:method:: ColorSpaceNameIterator.__iter__(self: PyOpenColorIO.ColorSpaceSet.ColorSpaceNameIterator) -> PyOpenColorIO.ColorSpaceSet.ColorSpaceNameIterator
      :module: PyOpenColorIO.ColorSpaceSet


   .. py:method:: ColorSpaceNameIterator.__len__(self: PyOpenColorIO.ColorSpaceSet.ColorSpaceNameIterator) -> int
      :module: PyOpenColorIO.ColorSpaceSet


   .. py:method:: ColorSpaceNameIterator.__next__(self: PyOpenColorIO.ColorSpaceSet.ColorSpaceNameIterator) -> str
      :module: PyOpenColorIO.ColorSpaceSet


.. py:class:: ColorSpaceIterator
   :module: PyOpenColorIO.ColorSpaceSet


   .. py:method:: ColorSpaceIterator.__getitem__(self: PyOpenColorIO.ColorSpaceSet.ColorSpaceIterator, arg0: int) -> PyOpenColorIO.ColorSpace
      :module: PyOpenColorIO.ColorSpaceSet


   .. py:method:: ColorSpaceIterator.__iter__(self: PyOpenColorIO.ColorSpaceSet.ColorSpaceIterator) -> PyOpenColorIO.ColorSpaceSet.ColorSpaceIterator
      :module: PyOpenColorIO.ColorSpaceSet


   .. py:method:: ColorSpaceIterator.__len__(self: PyOpenColorIO.ColorSpaceSet.ColorSpaceIterator) -> int
      :module: PyOpenColorIO.ColorSpaceSet


   .. py:method:: ColorSpaceIterator.__next__(self: PyOpenColorIO.ColorSpaceSet.ColorSpaceIterator) -> PyOpenColorIO.ColorSpace
      :module: PyOpenColorIO.ColorSpaceSet

