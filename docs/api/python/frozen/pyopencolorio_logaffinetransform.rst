..
  SPDX-License-Identifier: CC-BY-4.0
  Copyright Contributors to the OpenColorIO Project.
  Do not edit! This file was automatically generated by share/docs/frozendoc.py.

.. py:class:: LogAffineTransform
   :module: PyOpenColorIO

   Applies a logarithm with an affine transform before and after. Represents the Cineon lin-to-log type transforms::

   logSideSlope * log( linSideSlope * color + linSideOffset, base) + logSideOffset

   - Default values are: 1. * log( 1. * color + 0., 2.) + 0.
   - The alpha channel is not affected.


   .. py:method:: LogAffineTransform.__init__(*args, **kwargs)
      :module: PyOpenColorIO

      Overloaded function.

      1. __init__(self: PyOpenColorIO.LogAffineTransform) -> None

      2. __init__(self: PyOpenColorIO.LogAffineTransform, logSideSlope: List[float[3]] = [1.0, 1.0, 1.0], logSideOffset: List[float[3]] = [0.0, 0.0, 0.0], linSideSlope: List[float[3]] = [1.0, 1.0, 1.0], linSideOffset: List[float[3]] = [0.0, 0.0, 0.0], direction: PyOpenColorIO.TransformDirection = <TransformDirection.TRANSFORM_DIR_FORWARD: 0>) -> None


   .. py:method:: LogAffineTransform.equals(self: PyOpenColorIO.LogAffineTransform, other: PyOpenColorIO.LogAffineTransform) -> bool
      :module: PyOpenColorIO

      Checks if this exactly equals other.


   .. py:method:: LogAffineTransform.getBase(self: PyOpenColorIO.LogAffineTransform) -> float
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.getDirection(self: PyOpenColorIO.Transform) -> PyOpenColorIO.TransformDirection
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.getFormatMetadata(self: PyOpenColorIO.LogAffineTransform) -> PyOpenColorIO.FormatMetadata
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.getLinSideOffsetValue(self: PyOpenColorIO.LogAffineTransform) -> List[float[3]]
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.getLinSideSlopeValue(self: PyOpenColorIO.LogAffineTransform) -> List[float[3]]
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.getLogSideOffsetValue(self: PyOpenColorIO.LogAffineTransform) -> List[float[3]]
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.getLogSideSlopeValue(self: PyOpenColorIO.LogAffineTransform) -> List[float[3]]
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.getTransformType(self: PyOpenColorIO.Transform) -> PyOpenColorIO.TransformType
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.setBase(self: PyOpenColorIO.LogAffineTransform, base: float) -> None
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.setDirection(self: PyOpenColorIO.Transform, direction: PyOpenColorIO.TransformDirection) -> None
      :module: PyOpenColorIO

      Note that this only affects the evaluation and not the values stored in the object.


   .. py:method:: LogAffineTransform.setLinSideOffsetValue(self: PyOpenColorIO.LogAffineTransform, values: List[float[3]]) -> None
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.setLinSideSlopeValue(self: PyOpenColorIO.LogAffineTransform, values: List[float[3]]) -> None
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.setLogSideOffsetValue(self: PyOpenColorIO.LogAffineTransform, values: List[float[3]]) -> None
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.setLogSideSlopeValue(self: PyOpenColorIO.LogAffineTransform, values: List[float[3]]) -> None
      :module: PyOpenColorIO


   .. py:method:: LogAffineTransform.validate(self: PyOpenColorIO.Transform) -> None
      :module: PyOpenColorIO

      Will throw if data is not valid.

