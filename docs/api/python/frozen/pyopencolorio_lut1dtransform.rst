..
  SPDX-License-Identifier: CC-BY-4.0
  Copyright Contributors to the OpenColorIO Project.
  Do not edit! This file was automatically generated by share/docs/frozendoc.py.

.. py:class:: Lut1DTransform
   :module: PyOpenColorIO

   Represents a 1D-LUT transform.


   .. py:method:: Lut1DTransform.__init__(*args, **kwargs)
      :module: PyOpenColorIO

      Overloaded function.

      1. __init__(self: PyOpenColorIO.Lut1DTransform) -> None

      Create an identity 1D-LUT of length two.

      2. __init__(self: PyOpenColorIO.Lut1DTransform, length: int, inputHalfDomain: bool) -> None

      Create an identity 1D-LUT with specific length and half-domain setting. Will throw for lengths longer than 1024x1024.

      3. __init__(self: PyOpenColorIO.Lut1DTransform, length: int = 2, inputHalfDomain: bool = False, outputRawHalfs: bool = False, fileOutputBitDepth: PyOpenColorIO.BitDepth = <BitDepth.BIT_DEPTH_UNKNOWN: 0>, hueAdjust: PyOpenColorIO.Lut1DHueAdjust = <Lut1DHueAdjust.HUE_NONE: 0>, interpolation: PyOpenColorIO.Interpolation = <Interpolation.INTERP_DEFAULT: 254>, direction: PyOpenColorIO.TransformDirection = <TransformDirection.TRANSFORM_DIR_FORWARD: 0>) -> None

      Create an identity 1D-LUT with specific length and half-domain setting. Will throw for lengths longer than 1024x1024.


   .. py:method:: Lut1DTransform.equals(self: PyOpenColorIO.Lut1DTransform, other: PyOpenColorIO.Lut1DTransform) -> bool
      :module: PyOpenColorIO

      Checks if this exactly equals other.


   .. py:method:: Lut1DTransform.getData(self: PyOpenColorIO.Lut1DTransform) -> numpy.ndarray
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.getDirection(self: PyOpenColorIO.Transform) -> PyOpenColorIO.TransformDirection
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.getFileOutputBitDepth(self: PyOpenColorIO.Lut1DTransform) -> PyOpenColorIO.BitDepth
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.getFormatMetadata(self: PyOpenColorIO.Lut1DTransform) -> PyOpenColorIO.FormatMetadata
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.getHueAdjust(self: PyOpenColorIO.Lut1DTransform) -> PyOpenColorIO.Lut1DHueAdjust
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.getInputHalfDomain(self: PyOpenColorIO.Lut1DTransform) -> bool
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.getInterpolation(self: PyOpenColorIO.Lut1DTransform) -> PyOpenColorIO.Interpolation
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.getLength(self: PyOpenColorIO.Lut1DTransform) -> int
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.getOutputRawHalfs(self: PyOpenColorIO.Lut1DTransform) -> bool
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.getTransformType(self: PyOpenColorIO.Transform) -> PyOpenColorIO.TransformType
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.getValue(self: PyOpenColorIO.Lut1DTransform, index: int) -> tuple
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.setData(self: PyOpenColorIO.Lut1DTransform, data: buffer) -> None
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.setDirection(self: PyOpenColorIO.Transform, direction: PyOpenColorIO.TransformDirection) -> None
      :module: PyOpenColorIO

      Note that this only affects the evaluation and not the values stored in the object.


   .. py:method:: Lut1DTransform.setFileOutputBitDepth(self: PyOpenColorIO.Lut1DTransform, bitDepth: PyOpenColorIO.BitDepth) -> None
      :module: PyOpenColorIO

      Get the bit-depth associated with the LUT values read from a file or set the bit-depth of values to be written to a file (for file formats such as CLF that support multiple bit-depths). However, note that the values stored in the object are always normalized.


   .. py:method:: Lut1DTransform.setHueAdjust(self: PyOpenColorIO.Lut1DTransform, hueAdjust: PyOpenColorIO.Lut1DHueAdjust) -> None
      :module: PyOpenColorIO

      The 1D-LUT transform optionally supports a hue adjustment feature that was used in some versions of ACES. This adjusts the hue of the result to approximately match the input.


   .. py:method:: Lut1DTransform.setInputHalfDomain(self: PyOpenColorIO.Lut1DTransform, isHalfDomain: bool) -> None
      :module: PyOpenColorIO

      In a half-domain LUT, the contents of the LUT specify the desired value of the function for each half-float value. Therefore, the length of the LUT must be 65536 entries or else :ref:`validate()` will throw.


   .. py:method:: Lut1DTransform.setInterpolation(self: PyOpenColorIO.Lut1DTransform, interpolation: PyOpenColorIO.Interpolation) -> None
      :module: PyOpenColorIO


   .. py:method:: Lut1DTransform.setLength(self: PyOpenColorIO.Lut1DTransform, length: int) -> None
      :module: PyOpenColorIO

      Changing the length will reset the LUT to identity. Will throw for lengths longer than 1024x1024.


   .. py:method:: Lut1DTransform.setOutputRawHalfs(self: PyOpenColorIO.Lut1DTransform, isRawHalfs: bool) -> None
      :module: PyOpenColorIO

      Set OutputRawHalfs to true if you want to output the LUT contents as 16-bit floating point values expressed as unsigned 16-bit integers representing the equivalent bit pattern. For example, the value 1.0 would be written as the integer 15360 because it has the same bit-pattern. Note that this implies the values will be quantized to a 16-bit float. Note that this setting only controls the output formatting (where supported) and not the values for getValue/setValue. The only file formats that currently support this are CLF and CTF.


   .. py:method:: Lut1DTransform.setValue(self: PyOpenColorIO.Lut1DTransform, index: int, r: float, g: float, b: float) -> None
      :module: PyOpenColorIO

      Set the values of a LUT1D. Will throw if the index is outside of the range from 0 to (length-1).

      The LUT values are always for the "forward" LUT, regardless of how the transform direction is set.

      These values are normalized relative to what may be stored in any given LUT files. For example in a CLF file using a "10i" output depth, a value of 1023 in the file is normalized to 1.0. The values here are unclamped and may extend outside [0,1].

      LUTs in various file formats may only provide values for one channel where R, G, B are the same. Even in that case, you should provide three equal values to the setter.


   .. py:method:: Lut1DTransform.validate(self: PyOpenColorIO.Transform) -> None
      :module: PyOpenColorIO

      Will throw if data is not valid.

